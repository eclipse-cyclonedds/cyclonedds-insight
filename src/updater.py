"""
 * Copyright(c) 2024 Sven Trittler
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License
 * v. 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause
"""

import sys
import os
import platform
if getattr(sys, 'frozen', False):
    APPLICATION_PATH = sys._MEIPASS
    if platform.system() == "Linux":
        # https://bugreports.qt.io/browse/QTBUG-114635
        os.environ["QT_QPA_PLATFORM"] = "xcb" 
else:
    APPLICATION_PATH = os.path.dirname(os.path.abspath(__file__))

import argparse
from PySide6.QtWidgets import QApplication
from PySide6.QtQml import QQmlApplicationEngine, qmlRegisterType
from PySide6.QtCore import qInstallMessageHandler, QUrl, QThread, qVersion
from PySide6.QtGui import QIcon, QPixmap
from PySide6.QtQuickControls2 import QQuickStyle

from models.updater_model import UpdaterModel

# generated by pyside6-rcc
import qrc_file 


if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setWindowIcon(QIcon(QPixmap(":/res/images/cyclonedds.png")))
    app.setApplicationName("CycloneDDS Insight Updater")
    app.setApplicationDisplayName("CycloneDDS Insight Updater")
    app.setOrganizationName("cyclonedds")
    app.setOrganizationDomain("org.eclipse.cyclonedds.insight")

    # Setup the logger
    parser = argparse.ArgumentParser(description="Updater for CycloneDDS Insight")
    parser.add_argument("--appDir", type=str, required=True, help="Application directory")
    parser.add_argument("--organization", type=str, required=True, help="Organization name")
    parser.add_argument("--project", type=str, required=True, help="Project name")
    parser.add_argument("--buildId", type=str, required=True, help="Build ID")
    args = parser.parse_args()

    if sys.platform == "darwin":
        QQuickStyle.setStyle("macOS")
    else:
        QQuickStyle.setStyle("Fusion")

    updaterModel = UpdaterModel()

    engine = QQmlApplicationEngine()
    engine.rootContext().setContextProperty("updaterModel", updaterModel)
    engine.load(QUrl("qrc:/src/views/updater/UpdaterMain.qml"))
    if not engine.rootObjects():
        print("Failed to load qml")
        sys.exit(-1)

    ret_code = app.exec()

    sys.exit(ret_code)
