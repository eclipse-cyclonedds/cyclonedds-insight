"""
 * Copyright(c) 2024 Sven Trittler
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License
 * v. 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause
"""

import sys
import os

if getattr(sys, 'frozen', False):
    application_path = sys._MEIPASS
    # remove the env variable early to ensure that
    # cyclonedds-python will pick the correct libs
    # provided by the app bundle
    if "CYCLONEDDS_HOME" in os.environ:
        del os.environ["CYCLONEDDS_HOME"]
else:
    application_path = os.path.dirname(os.path.abspath(__file__))

from PySide6.QtGui import QGuiApplication
from PySide6.QtQml import QQmlApplicationEngine, qmlRegisterType
from PySide6.QtCore import qInstallMessageHandler, QUrl
from PySide6.QtGui import QIcon, QPixmap
from PySide6.QtQuickControls2 import QQuickStyle
from sys import platform
import logging

import dds_data
from overview_model import TreeModel, TreeNode
from endpoint_model import EndpointModel
from utils import qt_message_handler

# generated by pyside6-rcc
import qrc_file 


if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG, format='%(asctime)s [%(levelname)s] [%(filename)s:%(lineno)s] %(message)s')

    # Print qml log messages into the python log
    qInstallMessageHandler(qt_message_handler)

    logging.info("Starting App ...")
    logging.debug(f"Application path: {application_path}")

    app = QGuiApplication(sys.argv)
    app.setWindowIcon(QIcon(QPixmap(":/res/images/cyclonedds.png")))
    app.setApplicationName("CycloneDDS Insight")
    app.setApplicationDisplayName("CycloneDDS Insight")
    app.setOrganizationName("cyclonedds")
    app.setOrganizationDomain("org.eclipse.cyclonedds.insight")

    if platform == "darwin":
        QQuickStyle.setStyle("macOS")
    else:
        QQuickStyle.setStyle("Fusion")

    data = dds_data.DdsData()
    rootItem = TreeNode("Root")
    treeModel = TreeModel(rootItem)

    engine = QQmlApplicationEngine()
    engine.rootContext().setContextProperty("treeModel", treeModel)
    engine.rootContext().setContextProperty("CYCLONEDDS_URI", os.getenv("CYCLONEDDS_URI", "<not set>"))
    qmlRegisterType(EndpointModel, "org.eclipse.cyclonedds.insight", 1, 0, "EndpointModel")

    engine.load(QUrl("qrc:/src/views/main.qml"))
    if not engine.rootObjects():
        logging.critical("Failed to load qml")
        sys.exit(-1)

    # Add default domain
    data.add_domain(0)

    logging.info("qt ...")
    ret_code = app.exec()
    logging.info("qt ... DONE")

    # Clean up threads
    data.join_observer()

    sys.exit(ret_code)
