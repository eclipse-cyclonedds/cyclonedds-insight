"""
 * Copyright(c) 2024 Sven Trittler
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License
 * v. 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause
"""

import sys
import os
import platform

# Execution before first import of cyclonedds
if getattr(sys, 'frozen', False):
    APPLICATION_PATH = sys._MEIPASS
    # remove the env variable early to ensure that
    # cyclonedds-python will pick the correct libs
    # provided by the app bundle
    if "CYCLONEDDS_HOME" in os.environ:
        del os.environ["CYCLONEDDS_HOME"]
    if platform.system() == "Linux":
        # https://bugreports.qt.io/browse/QTBUG-114635
        os.environ["QT_QPA_PLATFORM"] = "xcb" 
else:
    APPLICATION_PATH = os.path.dirname(os.path.abspath(__file__))
    # In non-bundle mode we need the path to idlc executable
    cyclonedds_home = os.getenv('CYCLONEDDS_HOME')
    if not cyclonedds_home:
        raise Exception('CYCLONEDDS_HOME environment variable is not set.')
    else:
        print('cyclonedds_home: ' + cyclonedds_home)

import argparse
from PySide6.QtWidgets import QApplication
from PySide6.QtQml import QQmlApplicationEngine, qmlRegisterType
from PySide6.QtCore import qInstallMessageHandler, QUrl, QThread, qVersion
from PySide6.QtGui import QIcon, QPixmap
from PySide6.QtQuickControls2 import QQuickStyle
from loguru import logger as logging
from dds_access import dds_data
from dds_access.dds_utils import getConfiguredDomainIds
from models.overview_model.tree_filter_proxy_model import TreeFilterProxyModel
from models.overview_model.tree_model import TreeModel
from models.overview_model.tree_node import TreeNode
from models.endpoint_model import EndpointModel
from models.datamodel_model.datamodel_model import DatamodelModel
from models.datamodel_model.datamodel_proxy_model import DatamodelProxyModel
from models.tester_model import TesterModel
from models.shapes_demo_model import ShapesDemoModel
from models.graph_model import GraphModel
from utils.logger_config import LoggerConfig
from models.participant_model import ParticipantTreeModel, ParticipantTreeNode
from models.selection_details.participant_details_model import ParticipantDetailsModel
import utils.build_info_helper as build_info_helper
from utils.qml_utils import QmlUtils
from version import CYCLONEDDS_INSIGHT_VERSION
from module_handler import DataModelHandler
from models.statistics_model import StatisticsModel, StatisticsUnitModel

# generated by pyside6-rcc
import qrc_file 


if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setWindowIcon(QIcon(QPixmap(":/res/images/cyclonedds.png")))
    app.setApplicationName("CycloneDDS Insight")
    app.setApplicationDisplayName("CycloneDDS Insight")
    app.setOrganizationName("cyclonedds")
    app.setOrganizationDomain("org.eclipse.cyclonedds.insight")

    # Setup the logger
    parser = argparse.ArgumentParser(description="CycloneDDS Insight")
    parser.add_argument("--loglevel", type=str, help="Set logging level (TRACE, DEBUG, INFO, WARNING, ERROR, CRITICAL)", default="INFO")
    args = parser.parse_args()
    loglevel = args.loglevel.upper()
    loggerConfig = LoggerConfig()
    loggerConfig.setupLogger(loglevel)

    # Print qml log messages into the python log
    qInstallMessageHandler(loggerConfig.qt_message_handler)

    logging.info(f"Starting CycloneDDS Insight Version {CYCLONEDDS_INSIGHT_VERSION} ({build_info_helper.getBuildInfoGitHashShort()}) ...")
    logging.info(f"Branch: {build_info_helper.getBuildInfoGitBranch()}")
    logging.info(f"Commit: {build_info_helper.getBuildInfoGitHash()}")
    logging.info(f"CycloneDDS-Python: {build_info_helper.getBuildInfoCyclonePythonGitHash()}")
    logging.info(f"CycloneDDS: {build_info_helper.getBuildInfoCycloneGitHash()}")
    logging.info(f"Application path: {APPLICATION_PATH}")
    logging.info(f"Python version: {str(sys.version)}")
    logging.info(f"Qt version: {qVersion()}")

    if sys.platform == "darwin":
        QQuickStyle.setStyle("macOS")
    else:
        QQuickStyle.setStyle("Fusion")

    worker_thread = QThread()
    data = dds_data.DdsData()
    data.moveToThread(worker_thread)
    worker_thread.finished.connect(data.deleteLater)
    worker_thread.start()

    rootItem = TreeNode("Root")
    treeModel = TreeModel(rootItem)
    filterTreeModel = TreeFilterProxyModel()
    filterTreeModel.setSourceModel(treeModel)

    threads = {}
    dataModelHandler: DataModelHandler = DataModelHandler()
    datamodelRepoModel = DatamodelModel(threads, dataModelHandler)
    datamodelRepoModelProxy = DatamodelProxyModel()
    datamodelRepoModelProxy.setSourceModel(datamodelRepoModel)

    testerModel = TesterModel(threads, dataModelHandler)
    datamodelRepoModel.newWriterSignal.connect(testerModel.addWriter)
    participantRootItem = ParticipantTreeNode("Root")
    participantModel = ParticipantTreeModel(participantRootItem)
    shapesDemoModel = ShapesDemoModel()

    qmlUtils = QmlUtils()
    app.aboutToQuit.connect(qmlUtils.aboutToQuit)

    engine = QQmlApplicationEngine()
    engine.rootContext().setContextProperty("treeModelProxy", filterTreeModel)
    engine.rootContext().setContextProperty("treeModel", treeModel)
    engine.rootContext().setContextProperty("participantModel", participantModel)
    engine.rootContext().setContextProperty("datamodelRepoModel", datamodelRepoModel)
    engine.rootContext().setContextProperty("datamodelRepoModelProxy", datamodelRepoModelProxy)
    engine.rootContext().setContextProperty("testerModel", testerModel)
    engine.rootContext().setContextProperty("shapesDemoModel", shapesDemoModel)
    engine.rootContext().setContextProperty("qmlUtils", qmlUtils)
    engine.rootContext().setContextProperty("loggerConfig", loggerConfig)
    engine.rootContext().setContextProperty("CYCLONEDDS_URI", os.getenv("CYCLONEDDS_URI", "<not set>"))
    engine.rootContext().setContextProperty("CYCLONEDDS_INSIGHT_VERSION", CYCLONEDDS_INSIGHT_VERSION)
    engine.rootContext().setContextProperty("CYCLONEDDS_INSIGHT_GIT_HASH_SHORT", build_info_helper.getBuildInfoGitHashShort())
    engine.rootContext().setContextProperty("CYCLONEDDS_PYTHON_GIT_HASH_SHORT", build_info_helper.getBuildInfoCyclonePythonGitHashShort())
    engine.rootContext().setContextProperty("CYCLONEDDS_GIT_HASH_SHORT", build_info_helper.getBuildInfoCycloneGitHashShort())
    engine.rootContext().setContextProperty("CYCLONEDDS_INSIGHT_GIT_HASH", build_info_helper.getBuildInfoGitHash())
    engine.rootContext().setContextProperty("CYCLONEDDS_PYTHON_GIT_HASH", build_info_helper.getBuildInfoCyclonePythonGitHash())
    engine.rootContext().setContextProperty("CYCLONEDDS_GIT_HASH", build_info_helper.getBuildInfoCycloneGitHash())
    engine.rootContext().setContextProperty("CYCLONEDDS_INSIGHT_GIT_BRANCH", build_info_helper.getBuildInfoGitBranch())
    engine.rootContext().setContextProperty("CYCLONEDDS_INSIGHT_BUILD_ID", build_info_helper.getBuildId())
    engine.rootContext().setContextProperty("CYCLONEDDS_INSIGHT_BUILD_PIPELINE_ID", build_info_helper.getBuildPipelineId())

    qmlRegisterType(EndpointModel, "org.eclipse.cyclonedds.insight", 1, 0, "EndpointModel")
    qmlRegisterType(StatisticsModel, "org.eclipse.cyclonedds.insight", 1, 0, "StatisticsModel")
    qmlRegisterType(StatisticsUnitModel, "org.eclipse.cyclonedds.insight", 1, 0, "StatisticsUnitModel")
    qmlRegisterType(ParticipantDetailsModel, "org.eclipse.cyclonedds.insight", 1, 0, "ParticipantDetailsModel")
    qmlRegisterType(GraphModel, "org.eclipse.cyclonedds.insight", 1, 0, "GraphModel")

    engine.load(QUrl("qrc:/src/views/main.qml"))
    if not engine.rootObjects():
        logging.critical("Failed to load qml")
        sys.exit(-1)

    # Add all configured domains
    domainIds = getConfiguredDomainIds()    
    for domainId in domainIds:
        data.add_domain(domainId)

    # fallback
    if len(domainIds) == 0:
        data.add_domain(0)

    logging.info("qt ...")
    ret_code = app.exec()
    logging.info("qt ... DONE")

    logging.info("Clean up ...")
    logging.debug("Shutdown shapes demo ...")
    shapesDemoModel.stop()
    logging.debug("Shutdown data model ...")
    datamodelRepoModel.shutdownEndpoints()
    logging.debug("Shutdown data ...")
    data.join_observer()
    logging.debug("Shutdown worker thread ...")
    worker_thread.quit()
    worker_thread.wait()
    logging.info("Clean up ... DONE")

    sys.exit(ret_code)
